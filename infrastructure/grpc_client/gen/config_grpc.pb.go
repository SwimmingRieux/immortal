// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: infrastructure/grpc_client/proto/config.proto

package grpc_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Parameters_GetParameters_FullMethodName    = "/manager.v1.Parameters/GetParameters"
	Parameters_UpdateParameters_FullMethodName = "/manager.v1.Parameters/UpdateParameters"
)

// ParametersClient is the client API for Parameters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParametersClient interface {
	GetParameters(ctx context.Context, in *GetParametersRequest, opts ...grpc.CallOption) (*GetParametersResponse, error)
	UpdateParameters(ctx context.Context, in *GetParametersResponse, opts ...grpc.CallOption) (*UpdateParametersResponse, error)
}

type parametersClient struct {
	cc grpc.ClientConnInterface
}

func NewParametersClient(cc grpc.ClientConnInterface) ParametersClient {
	return &parametersClient{cc}
}

func (c *parametersClient) GetParameters(ctx context.Context, in *GetParametersRequest, opts ...grpc.CallOption) (*GetParametersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParametersResponse)
	err := c.cc.Invoke(ctx, Parameters_GetParameters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parametersClient) UpdateParameters(ctx context.Context, in *GetParametersResponse, opts ...grpc.CallOption) (*UpdateParametersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateParametersResponse)
	err := c.cc.Invoke(ctx, Parameters_UpdateParameters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParametersServer is the server API for Parameters service.
// All implementations must embed UnimplementedParametersServer
// for forward compatibility.
type ParametersServer interface {
	GetParameters(context.Context, *GetParametersRequest) (*GetParametersResponse, error)
	UpdateParameters(context.Context, *GetParametersResponse) (*UpdateParametersResponse, error)
	mustEmbedUnimplementedParametersServer()
}

// UnimplementedParametersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedParametersServer struct{}

func (UnimplementedParametersServer) GetParameters(context.Context, *GetParametersRequest) (*GetParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParameters not implemented")
}
func (UnimplementedParametersServer) UpdateParameters(context.Context, *GetParametersResponse) (*UpdateParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParameters not implemented")
}
func (UnimplementedParametersServer) mustEmbedUnimplementedParametersServer() {}
func (UnimplementedParametersServer) testEmbeddedByValue()                    {}

// UnsafeParametersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParametersServer will
// result in compilation errors.
type UnsafeParametersServer interface {
	mustEmbedUnimplementedParametersServer()
}

func RegisterParametersServer(s grpc.ServiceRegistrar, srv ParametersServer) {
	// If the following call pancis, it indicates UnimplementedParametersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Parameters_ServiceDesc, srv)
}

func _Parameters_GetParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParametersServer).GetParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Parameters_GetParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParametersServer).GetParameters(ctx, req.(*GetParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parameters_UpdateParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParametersResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParametersServer).UpdateParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Parameters_UpdateParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParametersServer).UpdateParameters(ctx, req.(*GetParametersResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// Parameters_ServiceDesc is the grpc.ServiceDesc for Parameters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Parameters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.v1.Parameters",
	HandlerType: (*ParametersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParameters",
			Handler:    _Parameters_GetParameters_Handler,
		},
		{
			MethodName: "UpdateParameters",
			Handler:    _Parameters_UpdateParameters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infrastructure/grpc_client/proto/config.proto",
}
