// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: delivery/grpc/proto/params.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ParametersService_UpdateParameters_FullMethodName = "/relay.v1.ParametersService/UpdateParameters"
)

// ParametersServiceClient is the client API for ParametersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParametersServiceClient interface {
	UpdateParameters(ctx context.Context, in *UpdateParametersRequest, opts ...grpc.CallOption) (*UpdateParametersResponse, error)
}

type parametersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParametersServiceClient(cc grpc.ClientConnInterface) ParametersServiceClient {
	return &parametersServiceClient{cc}
}

func (c *parametersServiceClient) UpdateParameters(ctx context.Context, in *UpdateParametersRequest, opts ...grpc.CallOption) (*UpdateParametersResponse, error) {
	out := new(UpdateParametersResponse)
	err := c.cc.Invoke(ctx, ParametersService_UpdateParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParametersServiceServer is the server API for ParametersService service.
// All implementations should embed UnimplementedParametersServiceServer
// for forward compatibility
type ParametersServiceServer interface {
	UpdateParameters(context.Context, *UpdateParametersRequest) (*UpdateParametersResponse, error)
}

// UnimplementedParametersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedParametersServiceServer struct {
}

func (UnimplementedParametersServiceServer) UpdateParameters(context.Context, *UpdateParametersRequest) (*UpdateParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParameters not implemented")
}

// UnsafeParametersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParametersServiceServer will
// result in compilation errors.
type UnsafeParametersServiceServer interface {
	mustEmbedUnimplementedParametersServiceServer()
}

func RegisterParametersServiceServer(s grpc.ServiceRegistrar, srv ParametersServiceServer) {
	s.RegisterService(&ParametersService_ServiceDesc, srv)
}

func _ParametersService_UpdateParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParametersServiceServer).UpdateParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParametersService_UpdateParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParametersServiceServer).UpdateParameters(ctx, req.(*UpdateParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParametersService_ServiceDesc is the grpc.ServiceDesc for ParametersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParametersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.v1.ParametersService",
	HandlerType: (*ParametersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParameters",
			Handler:    _ParametersService_UpdateParameters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "delivery/grpc/proto/params.proto",
}
